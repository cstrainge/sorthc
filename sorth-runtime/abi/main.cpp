
#include <iostream>
#include <exception>



// This function is generated by the Strainge Forth compiler.
extern "C" int8_t script_top_level(void);


// This function is defined in sorth-runtime.lib.
extern "C" void stack_initialize(void);


// Check to see if an error has been set in the run-time.
extern "C" bool is_error_set(void);


// Get the last error message that was set in the run-time.
extern "C" const char* get_last_error(void);


// This function is also defined in sorth-runtime.lib.
namespace sorth::run_time::abi::words
{
    void register_command_line_arguments(int argc, char* argv[]);
}


// We define the main function here so that we can initialize the data stack and the command line
// arguments before calling the generated top level of the user code.
int main(int argc, char* argv[])
{
    // Assume we'll be successful.
    int result = EXIT_SUCCESS;

    try
    {
        // Initialize the data stack, and  make sure that the command line arguments are available
        // to the Forth program.
        stack_initialize();

        sorth::run_time::abi::words::register_command_line_arguments(argc, argv);

        // Call the generated top level of the user code, and report any errors that were raised by
        // the user code, if any.
        result = script_top_level();

        if (   (result)
            && (is_error_set()))
        {
            std::cerr << "Error: " << get_last_error() << std::endl;
        }
    }
    catch (const std::exception& error)
    {
        // Something went wrong in the C++ run-time code.  Report the error and return a failure
        // status to the OS.
        std::cerr << "An unexpected error occurred: " << std::endl
                  << error.what() << std::endl;

        result = EXIT_FAILURE;
    }

    // Return the result of the script execution to the OS.
    return result;
}
